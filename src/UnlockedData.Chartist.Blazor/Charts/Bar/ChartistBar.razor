@using Microsoft.JSInterop
@using UnlockedData.Chartist.Blazor
@using UnlockedData.Chartist.Blazor.Core.Data
@using UnlockedData.Chartist.Blazor.Extensions
@inherits UnlockedData.Chartist.Blazor.Core.ChartBase

@namespace UnlockedData.Chartist.Blazor.Charts

<div class="chart-container">
    <div @ref="Elem" class="ct-chart @DisplayRatio.Description() @ClassForRotatedHorizontalLabels()" id="@Id"></div>
</div>

<CascadingValue Value="@(this)" Name="OwnerChart">
    @ChildContent
</CascadingValue>

@code {

    [Parameter]
    public BarOptions Options { get; set; } = new();

    [Parameter]
    public ExtendedChartData Data { get; set; } = new();

    [Parameter]
    public bool? Horizontal { get; set; }
    protected override void OnParametersSet() 
    {
        if (Horizontal is not null)
        {
            Options.HorizontalBars = Horizontal.Value;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
            Data.Labels = Labels ?? Data.Labels;

            var objectRef = DotNetObjectReference.Create(this);

            if (Options.HorizontalBars)
                Data.Series.ForEach(s =>
                {
                    if (!s.Swapped)
                    {
                        s.SeriesPoints.ForEach(d => d.SwapPoints());
                    }
                });

           
                await JS.InvokeVoidAsync("bChartist.createChart", "Bar", Elem, Data, Options, objectRef);
            
         
        
        
    }

}