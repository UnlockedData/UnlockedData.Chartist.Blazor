@using System.Xml.Schema
@using UnlockedData.Chartist.Blazor.Core.Data
@implements IDisposable

@namespace UnlockedData.Chartist.Blazor.Charts

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@code
{

    // Each time the params change, update a 'SeriesData' instance
    private readonly SeriesData _seriesData = new();

    // Accept data via Razor syntax
    [Parameter] public string Name { get; set; }

    [Parameter] public List<SeriesPoint> SeriesPoints { get; set; } = new();

    [Parameter] public string Meta { get; set; }

    [Parameter] public RenderFragment ChildContent { get; set; }

    // When we're first added to the UI, attach our data to parent
    // When we're removed from the UI, remove our data from parent
    [CascadingParameter] public ChartistBar OwnerChart { get; set; }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        OwnerChart.Data.Series.Remove(_seriesData);

    }

    protected override void OnParametersSet()
    {
        var seriesPoints = SeriesPoints.ToList();
        if (OwnerChart.Options.HorizontalBars)
        {
            seriesPoints.ForEach(d => d.SwapPoints());
            _seriesData.Swapped = true;
        }
              
        _seriesData.Name = Name;
        _seriesData.SeriesPoints = seriesPoints;
        _seriesData.Meta = Meta;
        _seriesData.Name = Name;
        _seriesData.SeriesPoints = SeriesPoints;
        _seriesData.Meta = Meta;
    }

    protected override void OnInitialized()
    {
        OwnerChart.Data.Series.Add(_seriesData);
    }
}