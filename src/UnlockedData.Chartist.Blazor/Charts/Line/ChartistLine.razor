@using Microsoft.JSInterop
@using UnlockedData.Chartist.Blazor
@using UnlockedData.Chartist.Blazor.Core.Data
@using UnlockedData.Chartist.Blazor.Extensions

@inherits UnlockedData.Chartist.Blazor.Core.ChartBase

@inject IJSRuntime JS;

@namespace UnlockedData.Chartist.Blazor.Charts

<div class="chart-container">
    <div @ref="elem" class="ct-chart @DisplayRatio.Description() @ClassForRotatedHorizontalLabels() chartist-smart" @attributes="ExtraAttributes" id="@_id"></div>
</div>

<CascadingValue Value="@(this)">
    @ChildContent
</CascadingValue>

@code {


    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public ExtendedChartData Data { get; set; } = new();

    [Parameter]
    public LineOptions Options { get; set; } = new();

    [Parameter]
    public DisplayRatio DisplayRatio { get; set; } = DisplayRatio.GoldenSection;

    [Parameter]
    public List<string> Labels { get; set; }

    string _id = "p" + Guid.NewGuid().ToString().Substring(0, 6);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Data.Labels = Labels ?? Data.Labels;

        var objectRef = DotNetObjectReference.Create(this);

        await JS.InvokeVoidAsync("bChartist.createChart", "Line", elem, Data, Options, objectRef, _id);
    }


}